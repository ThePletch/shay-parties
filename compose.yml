###############################################################
# See README for docker setup and package.json
# for docker command aliases
###############################################################
volumes:
  database-data:
  database-test-data:
  vendor-bundle:

x-db-consumer-env: &db-consumer-env
  DATABASE_HOST: partiesforall-postgres
  DATABASE_USERNAME: dev
  DATABASE_PASSWORD: password
  DATABASE_PORT: 5432

x-db-host-env: &postgres-env
  POSTGRES_USER: dev
  POSTGRES_PASSWORD: password
  POSTGRES_DB: development
  POSTGRES_HOST_AUTH_METHOD: trust

x-bundle-readonly-volume: &v-bundle-read
  type: volume
  source: vendor-bundle
  target: /usr/src/app/vendor/bundle/
  volume:
    nocopy: true

x-default-service: &servicedefaults
  build: &builddefaults
    context: .
    ssh:
    - default
  environment: &ssh-env
    SSH_AUTH_SOCK: /ssh-agent/ssh-auth.sock
  volumes:
  - &ssh-pass /run/host-services/:/ssh-agent # pass through ssh agent
  - &cache-app-dir ./:/usr/src/app:cached
  - &ssh-keys ~/.ssh/:/root/.ssh:cached # link ssh keys into container so that npm install works with private github repos
  restart: on-failure
services:
  api:
    <<: *servicedefaults
    build:
      <<: *builddefaults
      target: server
    environment:
      <<: [*ssh-env, *db-consumer-env]
      PORT: ${RAILS_PORT:-3000}
      PIDFILE: /tmp/pid/rails.pid
      RAILS_SERVE_STATIC_FILES: true
    ports:
    - "23000:${RAILS_PORT:-3000}"
    container_name: partiesforall-app
    volumes:
    - *v-bundle-read
    - *ssh-pass
    - *cache-app-dir
    - *ssh-keys
    tmpfs:
    - /tmp/pid
    depends_on:
      postgres:
        condition: service_healthy
      bundle-installer:
        condition: service_completed_successfully
      db-migrater:
        condition: service_completed_successfully

  # Shell only - must be run via `docker compose run`
  api-test-shell:
    <<: *servicedefaults
    profiles:
    - test
    build:
      <<: *builddefaults
      target: server
    environment:
      <<: [*ssh-env, *db-consumer-env]
      DATABASE_HOST: partiesforall-postgres-test
      RAILS_ENV: test
      # opens commands like `rails credentials:edit` in vim
      EDITOR: vim
    container_name: partiesforall-shell
    volumes:
    - *v-bundle-read
    - *ssh-pass
    - *cache-app-dir
    - *ssh-keys
    depends_on:
      postgres-test:
        condition: service_healthy
      bundle-installer:
        condition: service_completed_successfully
      db-migrater-test:
        condition: service_completed_successfully
  bundle-installer:
    <<: *servicedefaults
    build:
      <<: *builddefaults
      dockerfile: Dockerfile
      target: bundle-installer
    volumes:
      - *ssh-pass
      - *cache-app-dir
      - *ssh-keys
      # only container with write access to the bundle directory
      - vendor-bundle:/usr/src/app/vendor/bundle/
  db-migrater:
    <<: *servicedefaults
    build:
      <<: *builddefaults
      dockerfile: Dockerfile
      target: db-migrater
    environment:
      <<: [*ssh-env, *db-consumer-env]
    volumes:
    - *ssh-pass
    - *cache-app-dir
    - *ssh-keys
    - *v-bundle-read
    depends_on:
      postgres:
        condition: service_healthy
      bundle-installer:
        condition: service_completed_successfully
  db-migrater-test:
    <<: *servicedefaults
    profiles:
    - test
    build:
      <<: *builddefaults
      dockerfile: Dockerfile
      target: db-migrater
    environment:
      <<: [*ssh-env, *db-consumer-env]
      DATABASE_HOST: partiesforall-postgres-test
      RAILS_ENV: test
    volumes:
    - *ssh-pass
    - *cache-app-dir
    - *ssh-keys
    - *v-bundle-read
    depends_on:
      postgres-test:
        condition: service_healthy
      bundle-installer:
        condition: service_completed_successfully
  postgres: &postgres-container
    container_name: partiesforall-postgres
    image: postgres:14-alpine
    environment: *postgres-env
    ports:
    - "25432:5432"
    restart: on-failure
    volumes:
    - database-data:/var/lib/postgresql/data/:cached # persist data even if container shuts down
    entrypoint: "docker-entrypoint.sh -i"
    healthcheck: &postgres-healthcheck
      # we have to hardcode the host and database because health checks are configured during build,
      # and docker-compose env vars aren't available in the build
      test: "pg_isready -h localhost -U dev -d development"
      interval: 5s
      timeout: 4s
      retries: 3
      start_period: 60s
  postgres-test:
    <<: *postgres-container
    profiles:
    - test
    container_name: partiesforall-postgres-test
    environment:
      <<: *postgres-env
      POSTGRES_DB: test
    ports:
    - "25433:5432"
    volumes:
    - database-test-data:/var/lib/postgresql/data/:cached # persist data even if container shuts down
    healthcheck:
      <<: *postgres-healthcheck
      # we have to hardcode the host and database because health checks are configured during build,
      # and docker-compose env vars aren't available in the build
      test: "pg_isready -h localhost -U dev -d test"
