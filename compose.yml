###############################################################
# See README for docker setup and package.json
# for docker command aliases
###############################################################
version: "3.8" # latest docker-compose
volumes:
  database-data:
  database-test-data:
  vendor-bundle:

x-default-service: &servicedefaults
  build: &builddefaults
    context: .
    ssh:
      - default
  environment: &envdefaults
    DATABASE_HOST: partiesforall-postgres
    DATABASE_USERNAME: dev
    DATABASE_PASSWORD: password
    DATABASE_PORT: 5432
    SSH_AUTH_SOCK: /ssh-agent/ssh-auth.sock
  volumes:
    - &ssh-pass /run/host-services/:/ssh-agent # pass through ssh agent
    - &cache-app-dir ./:/usr/src/app:cached
    - &ssh-keys ~/.ssh/:/root/.ssh:cached # link ssh keys into container so that npm install works with private github repos
  restart: on-failure
services:
  api:
    <<: *servicedefaults
    build:
      <<: *builddefaults
      target: server
    environment:
      <<: *envdefaults
      PORT: 3000
      PIDFILE: /tmp/pid/rails.pid
    ports:
      - "23000:3000"
    container_name: partiesforall-app
    volumes:
      - type: volume
        source: vendor-bundle
        target: /usr/src/app/vendor/bundle/
        volume:
          nocopy: true
      - *ssh-pass
      - *cache-app-dir
      - *ssh-keys
    tmpfs:
      - /tmp/pid
    depends_on:
      postgres:
        condition: service_healthy
      bundle-installer:
        condition: service_completed_successfully
      db-migrater:
        condition: service_completed_successfully
  bundle-installer:
    <<: *servicedefaults
    build:
      <<: *builddefaults
      dockerfile: Dockerfile
      target: bundle-installer
    volumes:
      - *ssh-pass
      - *cache-app-dir
      - *ssh-keys
      - vendor-bundle:/usr/src/app/vendor/bundle/
  db-migrater:
    <<: *servicedefaults
    build:
      <<: *builddefaults
      dockerfile: Dockerfile
      target: db-migrater
    volumes:
      - *ssh-pass
      - *cache-app-dir
      - *ssh-keys
      - type: volume
        source: vendor-bundle
        target: /usr/src/app/vendor/bundle/
        volume:
          nocopy: true
    depends_on:
      postgres:
        condition: service_healthy
      bundle-installer:
        condition: service_completed_successfully
  postgres:
    container_name: partiesforall-postgres
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=dev
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=development
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - "25432:5432"
    restart: on-failure
    volumes:
      - database-data:/var/lib/postgresql/data/:cached # persist data even if container shuts down
    entrypoint: "docker-entrypoint.sh -i"
    healthcheck:
      # we have to hardcode the host and database because health checks are configured during build,
      # and docker-compose env vars aren't available in the build
      test: "pg_isready -h localhost -U dev -d development"
      interval: 5s
      timeout: 4s
      retries: 3
      start_period: 60s
  postgres-test:
    container_name: partiesforall-postgres-test
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=dev
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=test
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - "25433:5432"
    restart: on-failure
    volumes:
      - database-test-data:/var/lib/postgresql/data/:cached # persist data even if container shuts down
    entrypoint: "docker-entrypoint.sh -i"
    healthcheck:
      # we have to hardcode the host and database because health checks are configured during build,
      # and docker-compose env vars aren't available in the build
      test: "pg_isready -h localhost -U dev -d test"
      interval: 5s
      timeout: 4s
      retries: 3
      start_period: 60s
